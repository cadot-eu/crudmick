<?php
namespace  App\Controller¤sdir¤;
use DateTime;
use App\Entity\¤Entity¤;
use App\Form\¤ssdir¤¤Entity¤Type;
use App\Repository\¤Entity¤Repository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use App\Service\base\FileUploader;
use Knp\Component\Pager\PaginatorInterface;
use App\Service\base\ToolsHelper;
use App\Controller\base\ToolsController;

#[Route('¤partie¤/¤entity¤')]
class ¤Entity¤Controller extends ToolsController
{
   

    /*------------------------INDEX------------------------*/
    #[Route('/', name: '¤entity¤_index', methods: ['GET'])]
    public function index(¤Entity¤Repository $¤entity¤Repository, Request $request, PaginatorInterface $paginator): Response
    {
        ¤search¤
        $request->query->set('knpChampsRecherche', ToolsHelper::knpChampsRecherche('¤entity¤'));
        return $this->render('¤sdir¤/¤entity¤/index.html.twig', ['pagination' =>$paginator->paginate($dql,¤paginator¤)]);
    }
    
    /*------------------------DELETED------------------------*/
    #[Route('/deleted', name: '¤entity¤_deleted', methods: ['GET'])]
    public function deleted(¤Entity¤Repository $¤entity¤Repository, Request $request, PaginatorInterface $paginator): Response
    {
         $dql = $¤entity¤Repository->index($request->query->get('filterValue', ''),¤fields¤, $request->query->get('sort', 'a.id'), $request->query->get('direction'),null,true);
        return $this->render('¤sdir¤/¤entity¤/index.html.twig', [
            'pagination' =>$paginator->paginate($dql,$request->query->getInt('page', 1),8)
        ]);
    }
    
    /*------------------------CHAMP------------------------*/
     #[Route('/champ/{id}/{type}/{valeur}/{one}', name: '¤entity¤_champ', methods: ['GET'])]
    public function champ(¤Entity¤Repository $¤entity¤Repository,¤Entity¤ $¤entity¤, $type = null, $valeur = null,$one=false): Response
    {
        if($one){
         foreach($¤entity¤Repository->findAll() as $objet)
            {
                $method = 'set' . $type;
                $objet->$method(false);
                $this->em->persist($objet);
            }
            }
        if ($type) {
            $method = 'set' . $type;
            $¤entity¤->$method($valeur);
            $this->em->persist($¤entity¤);
            $this->em->flush();
            }
        return $this->redirectToRoute('¤entity¤_index', [], Response::HTTP_SEE_OTHER);
    }
    
    /*------------------------NEW/EDIT------------------------*/
    #[Route('/new', name: '¤entity¤_new', methods: ['GET', 'POST'])]
    #[Route('/{id}/edit', name: '¤entity¤_edit', methods: ['GET', 'POST'])]
    public function new(Request $request, FileUploader $fileUploader, ¤Entity¤ $¤entity¤ = null, EntityManagerInterface $em): Response
    {
        if (!$¤entity¤) $¤entity¤ = new ¤Entity¤(); //for new
        $form = $this->createForm(¤Entity¤Type::class, $¤entity¤,[¤formoptions¤]);
        if ($this->processFiles($form, $request, $¤entity¤)) {
            $this->em->persist($¤entity¤);
            $this->em->flush();
            return $this->redirectToRoute('¤entity¤_index', [], Response::HTTP_SEE_OTHER);
        }
        
        return $this->render('¤sdir¤/¤entity¤/new.html.twig', [
            '¤entity¤' => $¤entity¤,
            'form' => $form->createView()
        ]);
    }
     
    /*------------------------ALL DELETE------------------------*/
    #[Route('/toutsupprimer', name: '¤entity¤_alldelete', methods: ['POST'])]
    public function alldelete(Request $request, EntityManagerInterface $em): Response
    {
       return $this->toolsentityController->toutSupprimer('¤entity¤',$request, $this->em);
    }
    /* ------------------------------------SHOW-------------------------------------- */
    #[Route('/{id}', name: '¤entity¤_show', methods: ['GET'])]
    public function show(¤Entity¤ $¤entity¤): Response
    {
          return $this->toolsentityController->voir($¤entity¤);
    }
    
    /*------------------------CLONE------------------------*/
    #[Route('/{id}/clone', name: '¤entity¤_clone', methods: ['GET', 'POST'])]
    public function clone(¤Entity¤ $¤entity¤c, EntityManagerInterface $em): Response
    {
        $¤entity¤ = clone $¤entity¤c;
        if (property_exists($¤entity¤, 'slug')) {
            $¤entity¤->setslug($¤entity¤c->getslug().uniqid());
        }
         $¤entity¤=ToolsHelper::SetSlug($em, $¤entity¤);
        $em->persist($¤entity¤);
        $em->flush();
        return $this->redirectToRoute('¤entity¤_index', [], Response::HTTP_SEE_OTHER);
    }

    /*------------------------DELETE------------------------*/
    #[Route('/{id}', name: '¤entity¤_delete', methods: ['POST'])]
    public function delete(Request $request, ¤Entity¤ $¤entity¤,$id): Response
    {
        return $this->toolsentityController->supprimer($¤entity¤,$id, $request, $this->em);
    }
    
}
