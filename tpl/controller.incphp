<?php
namespace  App\Controller¤sdir¤;
use DateTime;
use App\Entity\¤Entity¤;
use App\Form\¤ssdir¤¤Entity¤Type;
use App\Repository\¤Entity¤Repository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use App\Service\base\FileUploader;
use Knp\Component\Pager\PaginatorInterface;

#[Route('¤partie¤/¤entity¤')]
class ¤Entity¤Controller extends AbstractController
{
    protected $em;
    public function __construct(
        EntityManagerInterface $em
    ) {
        $this->em = $em;
    }
    /* -------------------------------------------------------------------------- */
    /*                                    INDEX                                   */
    /* -------------------------------------------------------------------------- */
    #[Route('/', name: '¤entity¤_index', methods: ['GET'])]
    public function index(¤Entity¤Repository $¤entity¤Repository, Request $request, PaginatorInterface $paginator): Response
    {
        ¤search¤
        return $this->render('¤sdir¤/¤entity¤/index.html.twig', [
            /*¤index_render¤*/
            'pagination' =>$paginator->paginate($dql,¤paginator¤)
        ]);
    }
    /* -------------------------------------------------------------------------- */
    /*                                   DELETED                                  */
    /* -------------------------------------------------------------------------- */
    #[Route('/deleted', name: '¤entity¤_deleted', methods: ['GET'])]
    public function deleted(¤Entity¤Repository $¤entity¤Repository, Request $request, PaginatorInterface $paginator): Response
    {
         $dql = $¤entity¤Repository->index($request->query->get('filterValue', ''), $request->query->get('sort', 'a.id'), $request->query->get('direction'),true);
        return $this->render('¤sdir¤/¤entity¤/index.html.twig', [
            /*¤index_render¤*/
            'pagination' =>$paginator->paginate($dql,$request->query->getInt('page', 1),8)
        ]);
    }
    /* -------------------------------------------------------------------------- */
    /*                                    CHAMP                                    */
    /* -------------------------------------------------------------------------- */
    /**
     * @Route("/champ/{id}/{type}/{valeur}", name="¤entity¤_champ", methods={"GET"})
     */
    public function champ(¤Entity¤ $¤entity¤, $type = null, $valeur = null): Response
    {
        if ($type) {
            $method = 'set' . $type;
            $¤entity¤->$method($valeur);
            $this->em->persist($¤entity¤);
            $this->em->flush();
        }
        return $this->redirectToRoute('¤entity¤_index', [], Response::HTTP_SEE_OTHER);
    }
    /* -------------------------------------------------------------------------- */
    /*                                NEW AND EDIT                                */
    /* -------------------------------------------------------------------------- */
    #[Route('/new', name: '¤entity¤_new', methods: ['GET', 'POST'])]
    #[Route('/{id}/edit', name: '¤entity¤_edit', methods: ['GET', 'POST'])]
    public function new(Request $request, FileUploader $fileUploader, ¤Entity¤ $¤entity¤ = null, EntityManagerInterface $em): Response
    {
        if (!$¤entity¤) $¤entity¤ = new ¤Entity¤(); //for new
        $form = $this->createForm(¤Entity¤Type::class, $¤entity¤,[¤formoptions¤]);
        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()) {
            if ($request->files->get('¤entity¤'))
                foreach ($request->files->get('¤entity¤') as $name => $data) {
                    $fichier = $form->get($name)->getData();
                    if ($fichier) {
                        if (get_class($fichier) == 'Doctrine\Common\Collections\ArrayCollection' || get_class($fichier) == "Doctrine\ORM\PersistentCollection") {
                            $fichierName = [];
                            foreach ($fichier as $num => $fiche) {
                                if ($data[$num][key($data[$num])] != null) {
                                    $class = explode('\\', get_class($fiche));
                                    $fichierName = $fileUploader->upload($data[$num][key($data[$num])], "¤entity¤/$name/" . key($data[$num]) . '/');
                                    $functionE = 'set' . ucfirst(key($data[$num]));
                                    $fiche->$functionE($fichierName);
                                    $function = 'add' . end($class);
                                    $¤entity¤->$function($fiche);
                                }
                            }
                        } else {
                                $fichierName = $fileUploader->upload($fichier, "¤entity¤/$name/");
                                $function = 'set' . $name;
                                $¤entity¤->$function($fichierName);
                        }
                    }
                    //delete value
                    else
                    {
                         if($request->get("¤entity¤_" . $name)=='à retirer')
                                {
                         $function = 'set' . $name;
                         $¤entity¤->$function('');
                         }
                    }
                }
            //TODO: par listener
            ¤gets¤
            $em->persist($¤entity¤);
            $em->flush();
            return $this->redirectToRoute('¤entity¤_index', [], Response::HTTP_SEE_OTHER);
        }
        return $this->render('¤sdir¤/¤entity¤/new.html.twig', [
            '¤entity¤' => $¤entity¤,
            'form' => $form->createView()
        ]);
    }
    /* -------------------------------------------------------------------------- */
    /*                                    SHOW                                    */
    /* -------------------------------------------------------------------------- */
    #[Route('/{id}', name: '¤entity¤_show', methods: ['GET'])]
    public function show(¤Entity¤ $¤entity¤): Response
    {
    }
    /* -------------------------------------------------------------------------- */
    /*                                    CLONE                                   */
    /* -------------------------------------------------------------------------- */
    #[Route('/{id}/clone', name: '¤entity¤_clone', methods: ['GET', 'POST'])]
    public function clone(¤Entity¤ $¤entity¤c, EntityManagerInterface $em): Response
    {
        $¤entity¤ = clone $¤entity¤c;
        if (property_exists($¤entity¤, 'slug')) {
            $¤entity¤->setslug($¤entity¤c->getslug().uniqid());
        }
        $¤entity¤->setCreatedAt(new DateTime('now'));
        $em->persist($¤entity¤);
        $em->flush();
        return $this->redirectToRoute('¤entity¤_index', [], Response::HTTP_SEE_OTHER);
    }
    /* -------------------------------------------------------------------------- */
    /*                                   DELETE                                   */
    /* -------------------------------------------------------------------------- */
    #[Route('/{id}', name: '¤entity¤_delete', methods: ['POST'])]
    public function delete(Request $request, ¤Entity¤ $¤entity¤, EntityManagerInterface $em): Response
    {
        if ($this->isCsrfTokenValid('delete' . $¤entity¤->getId(), $request->request->get('_token')) ¤delete¤) {
            if ($request->request->has('delete_delete')) {
                $em->remove($¤entity¤);
            }
            if ($request->request->has('delete_restore'))
                $¤entity¤->setDeletedAt(null);
            if ($request->request->has('delete_softdelete'))
                $¤entity¤->setDeletedAt(new DateTime('now'));
            $em->flush();
        }
        if ($request->request->has('delete_softdelete'))
            return $this->redirectToRoute('¤entity¤_index', [], Response::HTTP_SEE_OTHER);
        else
            return $this->redirectToRoute('¤entity¤_deleted', [], Response::HTTP_SEE_OTHER);
    }
}
